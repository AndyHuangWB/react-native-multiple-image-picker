///
/// Result.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2024 Marc Rousavy @ Margelo
///

#pragma once

#if __has_include(<NitroModules/JSIConverter.hpp>)
#include <NitroModules/JSIConverter.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif
#if __has_include(<NitroModules/NitroDefines.hpp>)
#include <NitroModules/NitroDefines.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif



#include <string>
#include <optional>

namespace margelo::nitro::imagepicker {

  /**
   * A struct which can be represented as a JavaScript object (Result).
   */
  struct Result {
  public:
    std::string path     SWIFT_PRIVATE;
    std::string fileName     SWIFT_PRIVATE;
    std::string localIdentifier     SWIFT_PRIVATE;
    double width     SWIFT_PRIVATE;
    double height     SWIFT_PRIVATE;
    std::string mime     SWIFT_PRIVATE;
    double size     SWIFT_PRIVATE;
    std::optional<double> bucketId     SWIFT_PRIVATE;
    std::optional<std::string> realPath     SWIFT_PRIVATE;
    std::optional<std::string> parentFolderName     SWIFT_PRIVATE;
    std::optional<std::string> creationDate     SWIFT_PRIVATE;

  public:
    explicit Result(std::string path, std::string fileName, std::string localIdentifier, double width, double height, std::string mime, double size, std::optional<double> bucketId, std::optional<std::string> realPath, std::optional<std::string> parentFolderName, std::optional<std::string> creationDate): path(path), fileName(fileName), localIdentifier(localIdentifier), width(width), height(height), mime(mime), size(size), bucketId(bucketId), realPath(realPath), parentFolderName(parentFolderName), creationDate(creationDate) {}
  };

} // namespace margelo::nitro::imagepicker

namespace margelo::nitro {

  using namespace margelo::nitro::imagepicker;

  // C++ Result <> JS Result (object)
  template <>
  struct JSIConverter<Result> {
    static inline Result fromJSI(jsi::Runtime& runtime, const jsi::Value& arg) {
      jsi::Object obj = arg.asObject(runtime);
      return Result(
        JSIConverter<std::string>::fromJSI(runtime, obj.getProperty(runtime, "path")),
        JSIConverter<std::string>::fromJSI(runtime, obj.getProperty(runtime, "fileName")),
        JSIConverter<std::string>::fromJSI(runtime, obj.getProperty(runtime, "localIdentifier")),
        JSIConverter<double>::fromJSI(runtime, obj.getProperty(runtime, "width")),
        JSIConverter<double>::fromJSI(runtime, obj.getProperty(runtime, "height")),
        JSIConverter<std::string>::fromJSI(runtime, obj.getProperty(runtime, "mime")),
        JSIConverter<double>::fromJSI(runtime, obj.getProperty(runtime, "size")),
        JSIConverter<std::optional<double>>::fromJSI(runtime, obj.getProperty(runtime, "bucketId")),
        JSIConverter<std::optional<std::string>>::fromJSI(runtime, obj.getProperty(runtime, "realPath")),
        JSIConverter<std::optional<std::string>>::fromJSI(runtime, obj.getProperty(runtime, "parentFolderName")),
        JSIConverter<std::optional<std::string>>::fromJSI(runtime, obj.getProperty(runtime, "creationDate"))
      );
    }
    static inline jsi::Value toJSI(jsi::Runtime& runtime, const Result& arg) {
      jsi::Object obj(runtime);
      obj.setProperty(runtime, "path", JSIConverter<std::string>::toJSI(runtime, arg.path));
      obj.setProperty(runtime, "fileName", JSIConverter<std::string>::toJSI(runtime, arg.fileName));
      obj.setProperty(runtime, "localIdentifier", JSIConverter<std::string>::toJSI(runtime, arg.localIdentifier));
      obj.setProperty(runtime, "width", JSIConverter<double>::toJSI(runtime, arg.width));
      obj.setProperty(runtime, "height", JSIConverter<double>::toJSI(runtime, arg.height));
      obj.setProperty(runtime, "mime", JSIConverter<std::string>::toJSI(runtime, arg.mime));
      obj.setProperty(runtime, "size", JSIConverter<double>::toJSI(runtime, arg.size));
      obj.setProperty(runtime, "bucketId", JSIConverter<std::optional<double>>::toJSI(runtime, arg.bucketId));
      obj.setProperty(runtime, "realPath", JSIConverter<std::optional<std::string>>::toJSI(runtime, arg.realPath));
      obj.setProperty(runtime, "parentFolderName", JSIConverter<std::optional<std::string>>::toJSI(runtime, arg.parentFolderName));
      obj.setProperty(runtime, "creationDate", JSIConverter<std::optional<std::string>>::toJSI(runtime, arg.creationDate));
      return obj;
    }
    static inline bool canConvert(jsi::Runtime& runtime, const jsi::Value& value) {
      if (!value.isObject()) {
        return false;
      }
      jsi::Object obj = value.getObject(runtime);
      if (!JSIConverter<std::string>::canConvert(runtime, obj.getProperty(runtime, "path"))) return false;
      if (!JSIConverter<std::string>::canConvert(runtime, obj.getProperty(runtime, "fileName"))) return false;
      if (!JSIConverter<std::string>::canConvert(runtime, obj.getProperty(runtime, "localIdentifier"))) return false;
      if (!JSIConverter<double>::canConvert(runtime, obj.getProperty(runtime, "width"))) return false;
      if (!JSIConverter<double>::canConvert(runtime, obj.getProperty(runtime, "height"))) return false;
      if (!JSIConverter<std::string>::canConvert(runtime, obj.getProperty(runtime, "mime"))) return false;
      if (!JSIConverter<double>::canConvert(runtime, obj.getProperty(runtime, "size"))) return false;
      if (!JSIConverter<std::optional<double>>::canConvert(runtime, obj.getProperty(runtime, "bucketId"))) return false;
      if (!JSIConverter<std::optional<std::string>>::canConvert(runtime, obj.getProperty(runtime, "realPath"))) return false;
      if (!JSIConverter<std::optional<std::string>>::canConvert(runtime, obj.getProperty(runtime, "parentFolderName"))) return false;
      if (!JSIConverter<std::optional<std::string>>::canConvert(runtime, obj.getProperty(runtime, "creationDate"))) return false;
      return true;
    }
  };

} // namespace margelo::nitro
