///
/// Crop.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2024 Marc Rousavy @ Margelo
///

#pragma once

#if __has_include(<NitroModules/JSIConverter.hpp>)
#include <NitroModules/JSIConverter.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif
#if __has_include(<NitroModules/NitroDefines.hpp>)
#include <NitroModules/NitroDefines.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif





namespace margelo::nitro::multipleimagepicker {

  /**
   * A struct which can be represented as a JavaScript object (Crop).
   */
  struct Crop {
  public:
    double width     SWIFT_PRIVATE;
    double height     SWIFT_PRIVATE;
    double offsetX     SWIFT_PRIVATE;
    double offsetY     SWIFT_PRIVATE;
    double aspectRatio     SWIFT_PRIVATE;

  public:
    explicit Crop(double width, double height, double offsetX, double offsetY, double aspectRatio): width(width), height(height), offsetX(offsetX), offsetY(offsetY), aspectRatio(aspectRatio) {}
  };

} // namespace margelo::nitro::multipleimagepicker

namespace margelo::nitro {

  using namespace margelo::nitro::multipleimagepicker;

  // C++ Crop <> JS Crop (object)
  template <>
  struct JSIConverter<Crop> {
    static inline Crop fromJSI(jsi::Runtime& runtime, const jsi::Value& arg) {
      jsi::Object obj = arg.asObject(runtime);
      return Crop(
        JSIConverter<double>::fromJSI(runtime, obj.getProperty(runtime, "width")),
        JSIConverter<double>::fromJSI(runtime, obj.getProperty(runtime, "height")),
        JSIConverter<double>::fromJSI(runtime, obj.getProperty(runtime, "offsetX")),
        JSIConverter<double>::fromJSI(runtime, obj.getProperty(runtime, "offsetY")),
        JSIConverter<double>::fromJSI(runtime, obj.getProperty(runtime, "aspectRatio"))
      );
    }
    static inline jsi::Value toJSI(jsi::Runtime& runtime, const Crop& arg) {
      jsi::Object obj(runtime);
      obj.setProperty(runtime, "width", JSIConverter<double>::toJSI(runtime, arg.width));
      obj.setProperty(runtime, "height", JSIConverter<double>::toJSI(runtime, arg.height));
      obj.setProperty(runtime, "offsetX", JSIConverter<double>::toJSI(runtime, arg.offsetX));
      obj.setProperty(runtime, "offsetY", JSIConverter<double>::toJSI(runtime, arg.offsetY));
      obj.setProperty(runtime, "aspectRatio", JSIConverter<double>::toJSI(runtime, arg.aspectRatio));
      return obj;
    }
    static inline bool canConvert(jsi::Runtime& runtime, const jsi::Value& value) {
      if (!value.isObject()) {
        return false;
      }
      jsi::Object obj = value.getObject(runtime);
      if (!JSIConverter<double>::canConvert(runtime, obj.getProperty(runtime, "width"))) return false;
      if (!JSIConverter<double>::canConvert(runtime, obj.getProperty(runtime, "height"))) return false;
      if (!JSIConverter<double>::canConvert(runtime, obj.getProperty(runtime, "offsetX"))) return false;
      if (!JSIConverter<double>::canConvert(runtime, obj.getProperty(runtime, "offsetY"))) return false;
      if (!JSIConverter<double>::canConvert(runtime, obj.getProperty(runtime, "aspectRatio"))) return false;
      return true;
    }
  };

} // namespace margelo::nitro
