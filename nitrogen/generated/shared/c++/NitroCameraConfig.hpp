///
/// NitroCameraConfig.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2024 Marc Rousavy @ Margelo
///

#pragma once

#if __has_include(<NitroModules/JSIConverter.hpp>)
#include <NitroModules/JSIConverter.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif
#if __has_include(<NitroModules/NitroDefines.hpp>)
#include <NitroModules/NitroDefines.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif

// Forward declaration of `MediaType` to properly resolve imports.
namespace margelo::nitro::multipleimagepicker { enum class MediaType; }
// Forward declaration of `Language` to properly resolve imports.
namespace margelo::nitro::multipleimagepicker { enum class Language; }
// Forward declaration of `Presentation` to properly resolve imports.
namespace margelo::nitro::multipleimagepicker { enum class Presentation; }
// Forward declaration of `PickerCropConfig` to properly resolve imports.
namespace margelo::nitro::multipleimagepicker { struct PickerCropConfig; }

#include "MediaType.hpp"
#include "Language.hpp"
#include "Presentation.hpp"
#include <optional>
#include "PickerCropConfig.hpp"

namespace margelo::nitro::multipleimagepicker {

  /**
   * A struct which can be represented as a JavaScript object (NitroCameraConfig).
   */
  struct NitroCameraConfig {
  public:
    MediaType mediaType     SWIFT_PRIVATE;
    Language language     SWIFT_PRIVATE;
    Presentation presentation     SWIFT_PRIVATE;
    std::optional<bool> allowsEditing     SWIFT_PRIVATE;
    std::optional<PickerCropConfig> crop     SWIFT_PRIVATE;

  public:
    explicit NitroCameraConfig(MediaType mediaType, Language language, Presentation presentation, std::optional<bool> allowsEditing, std::optional<PickerCropConfig> crop): mediaType(mediaType), language(language), presentation(presentation), allowsEditing(allowsEditing), crop(crop) {}
  };

} // namespace margelo::nitro::multipleimagepicker

namespace margelo::nitro {

  using namespace margelo::nitro::multipleimagepicker;

  // C++ NitroCameraConfig <> JS NitroCameraConfig (object)
  template <>
  struct JSIConverter<NitroCameraConfig> {
    static inline NitroCameraConfig fromJSI(jsi::Runtime& runtime, const jsi::Value& arg) {
      jsi::Object obj = arg.asObject(runtime);
      return NitroCameraConfig(
        JSIConverter<MediaType>::fromJSI(runtime, obj.getProperty(runtime, "mediaType")),
        JSIConverter<Language>::fromJSI(runtime, obj.getProperty(runtime, "language")),
        JSIConverter<Presentation>::fromJSI(runtime, obj.getProperty(runtime, "presentation")),
        JSIConverter<std::optional<bool>>::fromJSI(runtime, obj.getProperty(runtime, "allowsEditing")),
        JSIConverter<std::optional<PickerCropConfig>>::fromJSI(runtime, obj.getProperty(runtime, "crop"))
      );
    }
    static inline jsi::Value toJSI(jsi::Runtime& runtime, const NitroCameraConfig& arg) {
      jsi::Object obj(runtime);
      obj.setProperty(runtime, "mediaType", JSIConverter<MediaType>::toJSI(runtime, arg.mediaType));
      obj.setProperty(runtime, "language", JSIConverter<Language>::toJSI(runtime, arg.language));
      obj.setProperty(runtime, "presentation", JSIConverter<Presentation>::toJSI(runtime, arg.presentation));
      obj.setProperty(runtime, "allowsEditing", JSIConverter<std::optional<bool>>::toJSI(runtime, arg.allowsEditing));
      obj.setProperty(runtime, "crop", JSIConverter<std::optional<PickerCropConfig>>::toJSI(runtime, arg.crop));
      return obj;
    }
    static inline bool canConvert(jsi::Runtime& runtime, const jsi::Value& value) {
      if (!value.isObject()) {
        return false;
      }
      jsi::Object obj = value.getObject(runtime);
      if (!JSIConverter<MediaType>::canConvert(runtime, obj.getProperty(runtime, "mediaType"))) return false;
      if (!JSIConverter<Language>::canConvert(runtime, obj.getProperty(runtime, "language"))) return false;
      if (!JSIConverter<Presentation>::canConvert(runtime, obj.getProperty(runtime, "presentation"))) return false;
      if (!JSIConverter<std::optional<bool>>::canConvert(runtime, obj.getProperty(runtime, "allowsEditing"))) return false;
      if (!JSIConverter<std::optional<PickerCropConfig>>::canConvert(runtime, obj.getProperty(runtime, "crop"))) return false;
      return true;
    }
  };

} // namespace margelo::nitro
