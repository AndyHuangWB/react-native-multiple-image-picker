///
/// Language.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2024 Marc Rousavy @ Margelo
///

#pragma once

#if __has_include(<NitroModules/NitroHash.hpp>)
#include <NitroModules/NitroHash.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif
#if __has_include(<NitroModules/JSIConverter.hpp>)
#include <NitroModules/JSIConverter.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif
#if __has_include(<NitroModules/NitroDefines.hpp>)
#include <NitroModules/NitroDefines.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif

namespace margelo::nitro::imagepicker {

  /**
   * An enum which can be represented as a JavaScript union (Language).
   */
  enum class Language {
    SYSTEM      SWIFT_NAME(system) = 0,
    SIMPLIFIEDCHINESE      SWIFT_NAME(simplifiedchinese) = 1,
    TRADITIONALCHINESE      SWIFT_NAME(traditionalchinese) = 2,
    JAPANESE      SWIFT_NAME(japanese) = 3,
    KOREAN      SWIFT_NAME(korean) = 4,
    ENGLISH      SWIFT_NAME(english) = 5,
    THAI      SWIFT_NAME(thai) = 6,
    INDONESIA      SWIFT_NAME(indonesia) = 7,
    VIETNAMESE      SWIFT_NAME(vietnamese) = 8,
    RUSSIAN      SWIFT_NAME(russian) = 9,
    GERMAN      SWIFT_NAME(german) = 10,
    FRENCH      SWIFT_NAME(french) = 11,
    ARABIC      SWIFT_NAME(arabic) = 12,
  } CLOSED_ENUM;

} // namespace margelo::nitro::imagepicker

namespace margelo::nitro {

  using namespace margelo::nitro::imagepicker;

  // C++ Language <> JS Language (union)
  template <>
  struct JSIConverter<Language> {
    static inline Language fromJSI(jsi::Runtime& runtime, const jsi::Value& arg) {
      std::string unionValue = JSIConverter<std::string>::fromJSI(runtime, arg);
      switch (hashString(unionValue.c_str(), unionValue.size())) {
        case hashString("system"): return Language::SYSTEM;
        case hashString("simplifiedChinese"): return Language::SIMPLIFIEDCHINESE;
        case hashString("traditionalChinese"): return Language::TRADITIONALCHINESE;
        case hashString("japanese"): return Language::JAPANESE;
        case hashString("korean"): return Language::KOREAN;
        case hashString("english"): return Language::ENGLISH;
        case hashString("thai"): return Language::THAI;
        case hashString("indonesia"): return Language::INDONESIA;
        case hashString("vietnamese"): return Language::VIETNAMESE;
        case hashString("russian"): return Language::RUSSIAN;
        case hashString("german"): return Language::GERMAN;
        case hashString("french"): return Language::FRENCH;
        case hashString("arabic"): return Language::ARABIC;
        default: [[unlikely]]
          throw std::invalid_argument("Cannot convert \"" + unionValue + "\" to enum Language - invalid value!");
      }
    }
    static inline jsi::Value toJSI(jsi::Runtime& runtime, Language arg) {
      switch (arg) {
        case Language::SYSTEM: return JSIConverter<std::string>::toJSI(runtime, "system");
        case Language::SIMPLIFIEDCHINESE: return JSIConverter<std::string>::toJSI(runtime, "simplifiedChinese");
        case Language::TRADITIONALCHINESE: return JSIConverter<std::string>::toJSI(runtime, "traditionalChinese");
        case Language::JAPANESE: return JSIConverter<std::string>::toJSI(runtime, "japanese");
        case Language::KOREAN: return JSIConverter<std::string>::toJSI(runtime, "korean");
        case Language::ENGLISH: return JSIConverter<std::string>::toJSI(runtime, "english");
        case Language::THAI: return JSIConverter<std::string>::toJSI(runtime, "thai");
        case Language::INDONESIA: return JSIConverter<std::string>::toJSI(runtime, "indonesia");
        case Language::VIETNAMESE: return JSIConverter<std::string>::toJSI(runtime, "vietnamese");
        case Language::RUSSIAN: return JSIConverter<std::string>::toJSI(runtime, "russian");
        case Language::GERMAN: return JSIConverter<std::string>::toJSI(runtime, "german");
        case Language::FRENCH: return JSIConverter<std::string>::toJSI(runtime, "french");
        case Language::ARABIC: return JSIConverter<std::string>::toJSI(runtime, "arabic");
        default: [[unlikely]]
          throw std::invalid_argument("Cannot convert Language to JS - invalid value: "
                                    + std::to_string(static_cast<int>(arg)) + "!");
      }
    }
    static inline bool canConvert(jsi::Runtime& runtime, const jsi::Value& value) {
      if (!value.isString()) {
        return false;
      }
      std::string unionValue = JSIConverter<std::string>::fromJSI(runtime, value);
      switch (hashString(unionValue.c_str(), unionValue.size())) {
        case hashString("system"):
        case hashString("simplifiedChinese"):
        case hashString("traditionalChinese"):
        case hashString("japanese"):
        case hashString("korean"):
        case hashString("english"):
        case hashString("thai"):
        case hashString("indonesia"):
        case hashString("vietnamese"):
        case hashString("russian"):
        case hashString("german"):
        case hashString("french"):
        case hashString("arabic"):
          return true;
        default:
          return false;
      }
    }
  };

} // namespace margelo::nitro
