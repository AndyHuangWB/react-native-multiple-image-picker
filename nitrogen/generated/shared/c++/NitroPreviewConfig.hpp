///
/// NitroPreviewConfig.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2024 Marc Rousavy @ Margelo
///

#pragma once

#if __has_include(<NitroModules/JSIConverter.hpp>)
#include <NitroModules/JSIConverter.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif
#if __has_include(<NitroModules/NitroDefines.hpp>)
#include <NitroModules/NitroDefines.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif

// Forward declaration of `Language` to properly resolve imports.
namespace margelo::nitro::multipleimagepicker { enum class Language; }

#include "Language.hpp"
#include <optional>

namespace margelo::nitro::multipleimagepicker {

  /**
   * A struct which can be represented as a JavaScript object (NitroPreviewConfig).
   */
  struct NitroPreviewConfig {
  public:
    double index     SWIFT_PRIVATE;
    Language language     SWIFT_PRIVATE;
    std::optional<double> backgroundColor     SWIFT_PRIVATE;

  public:
    explicit NitroPreviewConfig(double index, Language language, std::optional<double> backgroundColor): index(index), language(language), backgroundColor(backgroundColor) {}
  };

} // namespace margelo::nitro::multipleimagepicker

namespace margelo::nitro {

  using namespace margelo::nitro::multipleimagepicker;

  // C++ NitroPreviewConfig <> JS NitroPreviewConfig (object)
  template <>
  struct JSIConverter<NitroPreviewConfig> {
    static inline NitroPreviewConfig fromJSI(jsi::Runtime& runtime, const jsi::Value& arg) {
      jsi::Object obj = arg.asObject(runtime);
      return NitroPreviewConfig(
        JSIConverter<double>::fromJSI(runtime, obj.getProperty(runtime, "index")),
        JSIConverter<Language>::fromJSI(runtime, obj.getProperty(runtime, "language")),
        JSIConverter<std::optional<double>>::fromJSI(runtime, obj.getProperty(runtime, "backgroundColor"))
      );
    }
    static inline jsi::Value toJSI(jsi::Runtime& runtime, const NitroPreviewConfig& arg) {
      jsi::Object obj(runtime);
      obj.setProperty(runtime, "index", JSIConverter<double>::toJSI(runtime, arg.index));
      obj.setProperty(runtime, "language", JSIConverter<Language>::toJSI(runtime, arg.language));
      obj.setProperty(runtime, "backgroundColor", JSIConverter<std::optional<double>>::toJSI(runtime, arg.backgroundColor));
      return obj;
    }
    static inline bool canConvert(jsi::Runtime& runtime, const jsi::Value& value) {
      if (!value.isObject()) {
        return false;
      }
      jsi::Object obj = value.getObject(runtime);
      if (!JSIConverter<double>::canConvert(runtime, obj.getProperty(runtime, "index"))) return false;
      if (!JSIConverter<Language>::canConvert(runtime, obj.getProperty(runtime, "language"))) return false;
      if (!JSIConverter<std::optional<double>>::canConvert(runtime, obj.getProperty(runtime, "backgroundColor"))) return false;
      return true;
    }
  };

} // namespace margelo::nitro
