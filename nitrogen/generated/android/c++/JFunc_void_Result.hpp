///
/// JFunc_void_Result.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2024 Marc Rousavy @ Margelo
///

#pragma once

#include <fbjni/fbjni.h>
#include <functional>

#include <functional>
#include "Result.hpp"
#include "JResult.hpp"
#include <string>
#include <optional>
#include "ResultType.hpp"
#include "JResultType.hpp"

namespace margelo::nitro::multipleimagepicker {

  using namespace facebook;

  /**
   * C++ representation of the callback Func_void_Result.
   * This is a Kotlin `(result: Result) -> Unit`, backed by a `std::function<...>`.
   */
  struct JFunc_void_Result final: public jni::HybridClass<JFunc_void_Result> {
  public:
    static jni::local_ref<JFunc_void_Result::javaobject> fromCpp(const std::function<void(const Result& /* result */)>& func) {
      return JFunc_void_Result::newObjectCxxArgs(func);
    }

  public:
    void call(jni::alias_ref<JResult> result) {
      return _func(result->toCpp());
    }

  public:
    static auto constexpr kJavaDescriptor = "Lcom/margelo/nitro/multipleimagepicker/Func_void_Result;";
    static void registerNatives() {
      registerHybrid({makeNativeMethod("call", JFunc_void_Result::call)});
    }

  private:
    explicit JFunc_void_Result(const std::function<void(const Result& /* result */)>& func): _func(func) { }

  private:
    friend HybridBase;
    std::function<void(const Result& /* result */)> _func;
  };

} // namespace margelo::nitro::multipleimagepicker
