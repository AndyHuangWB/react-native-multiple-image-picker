///
/// JNitroPreviewConfig.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2024 Marc Rousavy @ Margelo
///

#pragma once

#include <fbjni/fbjni.h>
#include "NitroPreviewConfig.hpp"

#include "JLanguage.hpp"
#include "Language.hpp"
#include <optional>

namespace margelo::nitro::multipleimagepicker {

  using namespace facebook;

  /**
   * The C++ JNI bridge between the C++ struct "NitroPreviewConfig" and the the Kotlin data class "NitroPreviewConfig".
   */
  struct JNitroPreviewConfig final: public jni::JavaClass<JNitroPreviewConfig> {
  public:
    static auto constexpr kJavaDescriptor = "Lcom/margelo/nitro/multipleimagepicker/NitroPreviewConfig;";

  public:
    /**
     * Convert this Java/Kotlin-based struct to the C++ struct NitroPreviewConfig by copying all values to C++.
     */
    [[maybe_unused]]
    NitroPreviewConfig toCpp() const {
      static const auto clazz = javaClassStatic();
      static const auto fieldIndex = clazz->getField<double>("index");
      double index = this->getFieldValue(fieldIndex);
      static const auto fieldLanguage = clazz->getField<JLanguage>("language");
      jni::local_ref<JLanguage> language = this->getFieldValue(fieldLanguage);
      static const auto fieldBackgroundColor = clazz->getField<jni::JDouble>("backgroundColor");
      jni::local_ref<jni::JDouble> backgroundColor = this->getFieldValue(fieldBackgroundColor);
      return NitroPreviewConfig(
        index,
        language->toCpp(),
        backgroundColor != nullptr ? std::make_optional(backgroundColor->value()) : std::nullopt
      );
    }

  public:
    /**
     * Create a Java/Kotlin-based struct by copying all values from the given C++ struct to Java.
     */
    [[maybe_unused]]
    static jni::local_ref<JNitroPreviewConfig::javaobject> fromCpp(const NitroPreviewConfig& value) {
      return newInstance(
        value.index,
        JLanguage::fromCpp(value.language),
        value.backgroundColor.has_value() ? jni::JDouble::valueOf(value.backgroundColor.value()) : nullptr
      );
    }
  };

} // namespace margelo::nitro::multipleimagepicker
