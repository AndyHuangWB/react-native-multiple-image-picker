///
/// JNitroConfig.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2024 Marc Rousavy @ Margelo
///

#pragma once

#include <fbjni/fbjni.h>
#include "NitroConfig.hpp"

#include "CropConfig.hpp"
#include "JCropConfig.hpp"
#include "JLanguage.hpp"
#include "JMediaType.hpp"
#include "JPresentation.hpp"
#include "JResult.hpp"
#include "JResultType.hpp"
#include "JSelectBoxStyle.hpp"
#include "JSelectMode.hpp"
#include "JText.hpp"
#include "Language.hpp"
#include "MediaType.hpp"
#include "Presentation.hpp"
#include "Result.hpp"
#include "ResultType.hpp"
#include "SelectBoxStyle.hpp"
#include "SelectMode.hpp"
#include "Text.hpp"
#include <optional>
#include <string>
#include <vector>

namespace margelo::nitro::imagepicker {

  using namespace facebook;

  /**
   * The C++ JNI bridge between the C++ struct "NitroConfig" and the the Kotlin data class "NitroConfig".
   */
  struct JNitroConfig final: public jni::JavaClass<JNitroConfig> {
  public:
    static auto constexpr kJavaDescriptor = "Lcom/margelo/nitro/imagepicker/NitroConfig;";

  public:
    /**
     * Convert this Java/Kotlin-based struct to the C++ struct NitroConfig by copying all values to C++.
     */
    [[maybe_unused]]
    NitroConfig toCpp() const {
      static const auto clazz = javaClassStatic();
      static const auto fieldMediaType = clazz->getField<JMediaType>("mediaType");
      jni::local_ref<JMediaType> mediaType = this->getFieldValue(fieldMediaType);
      static const auto fieldSelectedAssets = clazz->getField<jni::JArrayClass<JResult>>("selectedAssets");
      jni::local_ref<jni::JArrayClass<JResult>> selectedAssets = this->getFieldValue(fieldSelectedAssets);
      static const auto fieldSelectBoxStyle = clazz->getField<JSelectBoxStyle>("selectBoxStyle");
      jni::local_ref<JSelectBoxStyle> selectBoxStyle = this->getFieldValue(fieldSelectBoxStyle);
      static const auto fieldSelectMode = clazz->getField<JSelectMode>("selectMode");
      jni::local_ref<JSelectMode> selectMode = this->getFieldValue(fieldSelectMode);
      static const auto fieldNumberOfColumn = clazz->getField<jni::JDouble>("numberOfColumn");
      jni::local_ref<jni::JDouble> numberOfColumn = this->getFieldValue(fieldNumberOfColumn);
      static const auto fieldIsPreview = clazz->getField<jni::JBoolean>("isPreview");
      jni::local_ref<jni::JBoolean> isPreview = this->getFieldValue(fieldIsPreview);
      static const auto fieldIsExportThumbnail = clazz->getField<jni::JBoolean>("isExportThumbnail");
      jni::local_ref<jni::JBoolean> isExportThumbnail = this->getFieldValue(fieldIsExportThumbnail);
      static const auto fieldPrimaryColor = clazz->getField<jni::JDouble>("primaryColor");
      jni::local_ref<jni::JDouble> primaryColor = this->getFieldValue(fieldPrimaryColor);
      static const auto fieldDeselectMessage = clazz->getField<jni::JString>("deselectMessage");
      jni::local_ref<jni::JString> deselectMessage = this->getFieldValue(fieldDeselectMessage);
      static const auto fieldAllowedCamera = clazz->getField<jni::JBoolean>("allowedCamera");
      jni::local_ref<jni::JBoolean> allowedCamera = this->getFieldValue(fieldAllowedCamera);
      static const auto fieldAllowedLivePhotos = clazz->getField<jni::JBoolean>("allowedLivePhotos");
      jni::local_ref<jni::JBoolean> allowedLivePhotos = this->getFieldValue(fieldAllowedLivePhotos);
      static const auto fieldAllowedVideo = clazz->getField<jni::JBoolean>("allowedVideo");
      jni::local_ref<jni::JBoolean> allowedVideo = this->getFieldValue(fieldAllowedVideo);
      static const auto fieldThumbnailWidth = clazz->getField<jni::JDouble>("thumbnailWidth");
      jni::local_ref<jni::JDouble> thumbnailWidth = this->getFieldValue(fieldThumbnailWidth);
      static const auto fieldThumbnailHeight = clazz->getField<jni::JDouble>("thumbnailHeight");
      jni::local_ref<jni::JDouble> thumbnailHeight = this->getFieldValue(fieldThumbnailHeight);
      static const auto fieldHaveThumbnail = clazz->getField<jni::JBoolean>("haveThumbnail");
      jni::local_ref<jni::JBoolean> haveThumbnail = this->getFieldValue(fieldHaveThumbnail);
      static const auto fieldSingleSelectedMode = clazz->getField<jni::JBoolean>("singleSelectedMode");
      jni::local_ref<jni::JBoolean> singleSelectedMode = this->getFieldValue(fieldSingleSelectedMode);
      static const auto fieldAllowSwipeToSelect = clazz->getField<jni::JBoolean>("allowSwipeToSelect");
      jni::local_ref<jni::JBoolean> allowSwipeToSelect = this->getFieldValue(fieldAllowSwipeToSelect);
      static const auto fieldIsCrop = clazz->getField<jni::JBoolean>("isCrop");
      jni::local_ref<jni::JBoolean> isCrop = this->getFieldValue(fieldIsCrop);
      static const auto fieldIsCropCircle = clazz->getField<jni::JBoolean>("isCropCircle");
      jni::local_ref<jni::JBoolean> isCropCircle = this->getFieldValue(fieldIsCropCircle);
      static const auto fieldSpacing = clazz->getField<jni::JDouble>("spacing");
      jni::local_ref<jni::JDouble> spacing = this->getFieldValue(fieldSpacing);
      static const auto fieldIsHiddenPreviewButton = clazz->getField<jni::JBoolean>("isHiddenPreviewButton");
      jni::local_ref<jni::JBoolean> isHiddenPreviewButton = this->getFieldValue(fieldIsHiddenPreviewButton);
      static const auto fieldIsHiddenOriginalButton = clazz->getField<jni::JBoolean>("isHiddenOriginalButton");
      jni::local_ref<jni::JBoolean> isHiddenOriginalButton = this->getFieldValue(fieldIsHiddenOriginalButton);
      static const auto fieldIsShowPreviewList = clazz->getField<jni::JBoolean>("isShowPreviewList");
      jni::local_ref<jni::JBoolean> isShowPreviewList = this->getFieldValue(fieldIsShowPreviewList);
      static const auto fieldAllowHapticTouchPreview = clazz->getField<jni::JBoolean>("allowHapticTouchPreview");
      jni::local_ref<jni::JBoolean> allowHapticTouchPreview = this->getFieldValue(fieldAllowHapticTouchPreview);
      static const auto fieldIsShowAssetNumber = clazz->getField<jni::JBoolean>("isShowAssetNumber");
      jni::local_ref<jni::JBoolean> isShowAssetNumber = this->getFieldValue(fieldIsShowAssetNumber);
      static const auto fieldAllowedLimit = clazz->getField<jni::JBoolean>("allowedLimit");
      jni::local_ref<jni::JBoolean> allowedLimit = this->getFieldValue(fieldAllowedLimit);
      static const auto fieldMaxPhoto = clazz->getField<jni::JDouble>("maxPhoto");
      jni::local_ref<jni::JDouble> maxPhoto = this->getFieldValue(fieldMaxPhoto);
      static const auto fieldMaxVideo = clazz->getField<jni::JDouble>("maxVideo");
      jni::local_ref<jni::JDouble> maxVideo = this->getFieldValue(fieldMaxVideo);
      static const auto fieldMaxSelect = clazz->getField<jni::JDouble>("maxSelect");
      jni::local_ref<jni::JDouble> maxSelect = this->getFieldValue(fieldMaxSelect);
      static const auto fieldMaxVideoDuration = clazz->getField<jni::JDouble>("maxVideoDuration");
      jni::local_ref<jni::JDouble> maxVideoDuration = this->getFieldValue(fieldMaxVideoDuration);
      static const auto fieldMinVideoDuration = clazz->getField<jni::JDouble>("minVideoDuration");
      jni::local_ref<jni::JDouble> minVideoDuration = this->getFieldValue(fieldMinVideoDuration);
      static const auto fieldMaxFileSize = clazz->getField<jni::JDouble>("maxFileSize");
      jni::local_ref<jni::JDouble> maxFileSize = this->getFieldValue(fieldMaxFileSize);
      static const auto fieldVideoQuality = clazz->getField<jni::JDouble>("videoQuality");
      jni::local_ref<jni::JDouble> videoQuality = this->getFieldValue(fieldVideoQuality);
      static const auto fieldImageQuality = clazz->getField<jni::JDouble>("imageQuality");
      jni::local_ref<jni::JDouble> imageQuality = this->getFieldValue(fieldImageQuality);
      static const auto fieldPresentation = clazz->getField<JPresentation>("presentation");
      jni::local_ref<JPresentation> presentation = this->getFieldValue(fieldPresentation);
      static const auto fieldText = clazz->getField<JText>("text");
      jni::local_ref<JText> text = this->getFieldValue(fieldText);
      static const auto fieldLanguage = clazz->getField<JLanguage>("language");
      jni::local_ref<JLanguage> language = this->getFieldValue(fieldLanguage);
      static const auto fieldCrop = clazz->getField<JCropConfig>("crop");
      jni::local_ref<JCropConfig> crop = this->getFieldValue(fieldCrop);
      return NitroConfig(
        mediaType->toCpp(),
        [&]() {
          size_t __size = selectedAssets->size();
          std::vector<Result> __vector;
          __vector.reserve(__size);
          for (size_t __i = 0; __i < __size; __i++) {
            auto __element = selectedAssets->getElement(__i);
            __vector.push_back(__element->toCpp());
          }
          return __vector;
        }(),
        selectBoxStyle->toCpp(),
        selectMode->toCpp(),
        numberOfColumn != nullptr ? std::make_optional(numberOfColumn->value()) : std::nullopt,
        isPreview != nullptr ? std::make_optional(isPreview->value()) : std::nullopt,
        isExportThumbnail != nullptr ? std::make_optional(isExportThumbnail->value()) : std::nullopt,
        primaryColor != nullptr ? std::make_optional(primaryColor->value()) : std::nullopt,
        deselectMessage != nullptr ? std::make_optional(deselectMessage->toStdString()) : std::nullopt,
        allowedCamera != nullptr ? std::make_optional(allowedCamera->value()) : std::nullopt,
        allowedLivePhotos != nullptr ? std::make_optional(allowedLivePhotos->value()) : std::nullopt,
        allowedVideo != nullptr ? std::make_optional(allowedVideo->value()) : std::nullopt,
        thumbnailWidth != nullptr ? std::make_optional(thumbnailWidth->value()) : std::nullopt,
        thumbnailHeight != nullptr ? std::make_optional(thumbnailHeight->value()) : std::nullopt,
        haveThumbnail != nullptr ? std::make_optional(haveThumbnail->value()) : std::nullopt,
        singleSelectedMode != nullptr ? std::make_optional(singleSelectedMode->value()) : std::nullopt,
        allowSwipeToSelect != nullptr ? std::make_optional(allowSwipeToSelect->value()) : std::nullopt,
        isCrop != nullptr ? std::make_optional(isCrop->value()) : std::nullopt,
        isCropCircle != nullptr ? std::make_optional(isCropCircle->value()) : std::nullopt,
        spacing != nullptr ? std::make_optional(spacing->value()) : std::nullopt,
        isHiddenPreviewButton != nullptr ? std::make_optional(isHiddenPreviewButton->value()) : std::nullopt,
        isHiddenOriginalButton != nullptr ? std::make_optional(isHiddenOriginalButton->value()) : std::nullopt,
        isShowPreviewList != nullptr ? std::make_optional(isShowPreviewList->value()) : std::nullopt,
        allowHapticTouchPreview != nullptr ? std::make_optional(allowHapticTouchPreview->value()) : std::nullopt,
        isShowAssetNumber != nullptr ? std::make_optional(isShowAssetNumber->value()) : std::nullopt,
        allowedLimit != nullptr ? std::make_optional(allowedLimit->value()) : std::nullopt,
        maxPhoto != nullptr ? std::make_optional(maxPhoto->value()) : std::nullopt,
        maxVideo != nullptr ? std::make_optional(maxVideo->value()) : std::nullopt,
        maxSelect != nullptr ? std::make_optional(maxSelect->value()) : std::nullopt,
        maxVideoDuration != nullptr ? std::make_optional(maxVideoDuration->value()) : std::nullopt,
        minVideoDuration != nullptr ? std::make_optional(minVideoDuration->value()) : std::nullopt,
        maxFileSize != nullptr ? std::make_optional(maxFileSize->value()) : std::nullopt,
        videoQuality != nullptr ? std::make_optional(videoQuality->value()) : std::nullopt,
        imageQuality != nullptr ? std::make_optional(imageQuality->value()) : std::nullopt,
        presentation->toCpp(),
        text != nullptr ? std::make_optional(text->toCpp()) : std::nullopt,
        language->toCpp(),
        crop != nullptr ? std::make_optional(crop->toCpp()) : std::nullopt
      );
    }

  public:
    /**
     * Create a Java/Kotlin-based struct by copying all values from the given C++ struct to Java.
     */
    [[maybe_unused]]
    static jni::local_ref<JNitroConfig::javaobject> fromCpp(const NitroConfig& value) {
      return newInstance(
        JMediaType::fromCpp(value.mediaType),
        [&]() {
          size_t __size = value.selectedAssets.size();
          jni::local_ref<jni::JArrayClass<JResult>> __array = jni::JArrayClass<JResult>::newArray(__size);
          for (size_t __i = 0; __i < __size; __i++) {
            const auto& __element = value.selectedAssets[__i];
            __array->setElement(__i, *JResult::fromCpp(__element));
          }
          return __array;
        }(),
        JSelectBoxStyle::fromCpp(value.selectBoxStyle),
        JSelectMode::fromCpp(value.selectMode),
        value.numberOfColumn.has_value() ? jni::JDouble::valueOf(value.numberOfColumn.value()) : nullptr,
        value.isPreview.has_value() ? jni::JBoolean::valueOf(value.isPreview.value()) : nullptr,
        value.isExportThumbnail.has_value() ? jni::JBoolean::valueOf(value.isExportThumbnail.value()) : nullptr,
        value.primaryColor.has_value() ? jni::JDouble::valueOf(value.primaryColor.value()) : nullptr,
        value.deselectMessage.has_value() ? jni::make_jstring(value.deselectMessage.value()) : nullptr,
        value.allowedCamera.has_value() ? jni::JBoolean::valueOf(value.allowedCamera.value()) : nullptr,
        value.allowedLivePhotos.has_value() ? jni::JBoolean::valueOf(value.allowedLivePhotos.value()) : nullptr,
        value.allowedVideo.has_value() ? jni::JBoolean::valueOf(value.allowedVideo.value()) : nullptr,
        value.thumbnailWidth.has_value() ? jni::JDouble::valueOf(value.thumbnailWidth.value()) : nullptr,
        value.thumbnailHeight.has_value() ? jni::JDouble::valueOf(value.thumbnailHeight.value()) : nullptr,
        value.haveThumbnail.has_value() ? jni::JBoolean::valueOf(value.haveThumbnail.value()) : nullptr,
        value.singleSelectedMode.has_value() ? jni::JBoolean::valueOf(value.singleSelectedMode.value()) : nullptr,
        value.allowSwipeToSelect.has_value() ? jni::JBoolean::valueOf(value.allowSwipeToSelect.value()) : nullptr,
        value.isCrop.has_value() ? jni::JBoolean::valueOf(value.isCrop.value()) : nullptr,
        value.isCropCircle.has_value() ? jni::JBoolean::valueOf(value.isCropCircle.value()) : nullptr,
        value.spacing.has_value() ? jni::JDouble::valueOf(value.spacing.value()) : nullptr,
        value.isHiddenPreviewButton.has_value() ? jni::JBoolean::valueOf(value.isHiddenPreviewButton.value()) : nullptr,
        value.isHiddenOriginalButton.has_value() ? jni::JBoolean::valueOf(value.isHiddenOriginalButton.value()) : nullptr,
        value.isShowPreviewList.has_value() ? jni::JBoolean::valueOf(value.isShowPreviewList.value()) : nullptr,
        value.allowHapticTouchPreview.has_value() ? jni::JBoolean::valueOf(value.allowHapticTouchPreview.value()) : nullptr,
        value.isShowAssetNumber.has_value() ? jni::JBoolean::valueOf(value.isShowAssetNumber.value()) : nullptr,
        value.allowedLimit.has_value() ? jni::JBoolean::valueOf(value.allowedLimit.value()) : nullptr,
        value.maxPhoto.has_value() ? jni::JDouble::valueOf(value.maxPhoto.value()) : nullptr,
        value.maxVideo.has_value() ? jni::JDouble::valueOf(value.maxVideo.value()) : nullptr,
        value.maxSelect.has_value() ? jni::JDouble::valueOf(value.maxSelect.value()) : nullptr,
        value.maxVideoDuration.has_value() ? jni::JDouble::valueOf(value.maxVideoDuration.value()) : nullptr,
        value.minVideoDuration.has_value() ? jni::JDouble::valueOf(value.minVideoDuration.value()) : nullptr,
        value.maxFileSize.has_value() ? jni::JDouble::valueOf(value.maxFileSize.value()) : nullptr,
        value.videoQuality.has_value() ? jni::JDouble::valueOf(value.videoQuality.value()) : nullptr,
        value.imageQuality.has_value() ? jni::JDouble::valueOf(value.imageQuality.value()) : nullptr,
        JPresentation::fromCpp(value.presentation),
        value.text.has_value() ? JText::fromCpp(value.text.value()) : nullptr,
        JLanguage::fromCpp(value.language),
        value.crop.has_value() ? JCropConfig::fromCpp(value.crop.value()) : nullptr
      );
    }
  };

} // namespace margelo::nitro::imagepicker
